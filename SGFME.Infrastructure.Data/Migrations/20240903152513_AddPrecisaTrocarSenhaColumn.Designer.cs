// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGFME.Infrastructure.Data.Context;

#nullable disable

namespace SGFME.Infrastructure.Data.Migrations
{
    [DbContext(typeof(SqlServerContext))]
    [Migration("20240903152513_AddPrecisaTrocarSenhaColumn")]
    partial class AddPrecisaTrocarSenhaColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SGFME.Domain.Entidades.Cid", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("codigo");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descricao");

                    b.Property<long>("idStatus")
                        .HasColumnType("bigint");

                    b.Property<long>("idVersaoCid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("idStatus");

                    b.HasIndex("idVersaoCid");

                    b.ToTable("Cid", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Contato", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("discriminator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("idEstabelecimentoSaude")
                        .HasColumnType("bigint");

                    b.Property<long?>("idFuncionario")
                        .HasColumnType("bigint");

                    b.Property<long?>("idMedico")
                        .HasColumnType("bigint");

                    b.Property<long?>("idPaciente")
                        .HasColumnType("bigint");

                    b.Property<long?>("idRepresentante")
                        .HasColumnType("bigint");

                    b.Property<long>("idTipoContato")
                        .HasColumnType("bigint");

                    b.Property<string>("valor")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("valor");

                    b.HasKey("id");

                    b.HasIndex("idEstabelecimentoSaude");

                    b.HasIndex("idFuncionario");

                    b.HasIndex("idMedico");

                    b.HasIndex("idPaciente");

                    b.HasIndex("idRepresentante");

                    b.HasIndex("idTipoContato");

                    b.ToTable("Contato", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.CorRaca", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("CorRaca", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Endereco", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("bairro")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("bairro");

                    b.Property<string>("cep")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("cep");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("cidade");

                    b.Property<string>("complemento")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("complemento");

                    b.Property<string>("discriminator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("idEstabelecimentoSaude")
                        .HasColumnType("bigint");

                    b.Property<long?>("idFuncionario")
                        .HasColumnType("bigint");

                    b.Property<long?>("idMedico")
                        .HasColumnType("bigint");

                    b.Property<long?>("idPaciente")
                        .HasColumnType("bigint");

                    b.Property<long?>("idRepresentante")
                        .HasColumnType("bigint");

                    b.Property<long>("idTipoEndereco")
                        .HasColumnType("bigint");

                    b.Property<string>("logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("logradouro");

                    b.Property<string>("numero")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numero");

                    b.Property<string>("pontoReferencia")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("pontoReferencia");

                    b.Property<string>("uf")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("uf");

                    b.HasKey("id");

                    b.HasIndex("idEstabelecimentoSaude");

                    b.HasIndex("idFuncionario");

                    b.HasIndex("idMedico");

                    b.HasIndex("idPaciente");

                    b.HasIndex("idRepresentante");

                    b.HasIndex("idTipoEndereco");

                    b.ToTable("Endereco", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Especialidade", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("Especialidade", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.EstabelecimentoSaude", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("cnes")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cnes");

                    b.Property<DateTime>("dataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<long>("idStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("nomeFantasia")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeFantasia");

                    b.Property<string>("razaoSocial")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("razaoSocial");

                    b.HasKey("id");

                    b.HasIndex("idStatus");

                    b.ToTable("EstabelecimentoSaude", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.EstadoCivil", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("EstadoCivil", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Funcionario", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("cnsNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cnsNumero");

                    b.Property<string>("cpfNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cpfNumero");

                    b.Property<string>("crf")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("crf");

                    b.Property<string>("crfUf")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("crfUf");

                    b.Property<DateTime>("dataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataNascimento");

                    b.Property<long>("idCorRaca")
                        .HasColumnType("bigint");

                    b.Property<long>("idEstabelecimentoSaude")
                        .HasColumnType("bigint");

                    b.Property<long>("idEstadoCivil")
                        .HasColumnType("bigint");

                    b.Property<long>("idSexo")
                        .HasColumnType("bigint");

                    b.Property<long>("idStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("naturalidadeCidade")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("naturalidadeCidade");

                    b.Property<string>("naturalidadeUf")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("naturalidadeUf");

                    b.Property<string>("nomeCompleto")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeCompleto");

                    b.Property<string>("nomeConjuge")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeConjuge");

                    b.Property<string>("nomeMae")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeMae");

                    b.Property<DateTime>("rgDataEmissao")
                        .HasColumnType("datetime")
                        .HasColumnName("rgDataEmissao");

                    b.Property<string>("rgNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgNumero");

                    b.Property<string>("rgOrgaoExpedidor")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgOrgaoExpedidor");

                    b.Property<string>("rgUfEmissao")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgUfEmissao");

                    b.HasKey("id");

                    b.HasIndex("idCorRaca");

                    b.HasIndex("idEstabelecimentoSaude");

                    b.HasIndex("idEstadoCivil");

                    b.HasIndex("idSexo");

                    b.HasIndex("idStatus");

                    b.ToTable("Funcionario", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Medicamento", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("idStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.HasIndex("idStatus");

                    b.ToTable("Medicamento", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Medico", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("cnsNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cnsNumero");

                    b.Property<string>("cpfNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cpfNumero");

                    b.Property<string>("crm")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("crm");

                    b.Property<DateTime>("dataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataNascimento");

                    b.Property<long>("idCorRaca")
                        .HasColumnType("bigint");

                    b.Property<long>("idEstadoCivil")
                        .HasColumnType("bigint");

                    b.Property<long>("idSexo")
                        .HasColumnType("bigint");

                    b.Property<long>("idStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("naturalidadeCidade")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("naturalidadeCidade");

                    b.Property<string>("naturalidadeUf")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("naturalidadeUf");

                    b.Property<string>("nomeCompleto")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeCompleto");

                    b.Property<string>("nomeConjuge")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeConjuge");

                    b.Property<string>("nomeMae")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeMae");

                    b.Property<DateTime>("rgDataEmissao")
                        .HasColumnType("datetime")
                        .HasColumnName("rgDataEmissao");

                    b.Property<string>("rgNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgNumero");

                    b.Property<string>("rgOrgaoExpedidor")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgOrgaoExpedidor");

                    b.Property<string>("rgUfEmissao")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgUfEmissao");

                    b.HasKey("id");

                    b.HasIndex("idCorRaca");

                    b.HasIndex("idEstadoCivil");

                    b.HasIndex("idSexo");

                    b.HasIndex("idStatus");

                    b.ToTable("Medico", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Naturalidade", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("cidade");

                    b.Property<string>("uf")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("uf");

                    b.HasKey("id");

                    b.ToTable("Naturalidade", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Paciente", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<decimal>("altura")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("altura");

                    b.Property<string>("cnsNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cnsNumero");

                    b.Property<string>("cpfNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cpfNumero");

                    b.Property<DateTime>("dataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataNascimento");

                    b.Property<long>("idCorRaca")
                        .HasColumnType("bigint");

                    b.Property<long>("idEstadoCivil")
                        .HasColumnType("bigint");

                    b.Property<long>("idProfissao")
                        .HasColumnType("bigint");

                    b.Property<long>("idSexo")
                        .HasColumnType("bigint");

                    b.Property<long>("idStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("naturalidadeCidade")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("naturalidadeCidade");

                    b.Property<string>("naturalidadeUf")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("naturalidadeUf");

                    b.Property<string>("nomeCompleto")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeCompleto");

                    b.Property<string>("nomeConjuge")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeConjuge");

                    b.Property<string>("nomeMae")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeMae");

                    b.Property<decimal>("peso")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("peso");

                    b.Property<DateTime>("rgDataEmissao")
                        .HasColumnType("datetime")
                        .HasColumnName("rgDataEmissao");

                    b.Property<string>("rgNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgNumero");

                    b.Property<string>("rgOrgaoExpedidor")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgOrgaoExpedidor");

                    b.Property<string>("rgUfEmissao")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgUfEmissao");

                    b.HasKey("id");

                    b.HasIndex("idCorRaca");

                    b.HasIndex("idEstadoCivil");

                    b.HasIndex("idProfissao");

                    b.HasIndex("idSexo");

                    b.HasIndex("idStatus");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.PerfilUsuario", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("PerfilUsuario", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Pessoa", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataNascimento");

                    b.Property<int>("idade")
                        .HasColumnType("int")
                        .HasColumnName("idade");

                    b.Property<string>("nomeCompleto")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nomeCompleto");

                    b.Property<string>("nomeMae")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nomeMae");

                    b.HasKey("id");

                    b.ToTable("Pessoa", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Profissao", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("Profissao", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Representante", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("cnsNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cnsNumero");

                    b.Property<string>("cpfNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cpfNumero");

                    b.Property<DateTime>("dataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("dataCadastro");

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataNascimento");

                    b.Property<long>("idCorRaca")
                        .HasColumnType("bigint");

                    b.Property<long>("idEstadoCivil")
                        .HasColumnType("bigint");

                    b.Property<long>("idProfissao")
                        .HasColumnType("bigint");

                    b.Property<long>("idSexo")
                        .HasColumnType("bigint");

                    b.Property<long>("idStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("naturalidadeCidade")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("naturalidadeCidade");

                    b.Property<string>("naturalidadeUf")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("naturalidadeUf");

                    b.Property<string>("nomeCompleto")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeCompleto");

                    b.Property<string>("nomeConjuge")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeConjuge");

                    b.Property<string>("nomeMae")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeMae");

                    b.Property<DateTime>("rgDataEmissao")
                        .HasColumnType("datetime")
                        .HasColumnName("rgDataEmissao");

                    b.Property<string>("rgNumero")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgNumero");

                    b.Property<string>("rgOrgaoExpedidor")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgOrgaoExpedidor");

                    b.Property<string>("rgUfEmissao")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rgUfEmissao");

                    b.HasKey("id");

                    b.HasIndex("idCorRaca");

                    b.HasIndex("idEstadoCivil");

                    b.HasIndex("idProfissao");

                    b.HasIndex("idSexo");

                    b.HasIndex("idStatus");

                    b.ToTable("Representante", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Sexo", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("Sexo", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Status", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.TipoContato", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("TipoContato", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.TipoEndereco", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("TipoEndereco", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Usuario", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("idFuncionario")
                        .HasColumnType("bigint");

                    b.Property<long>("idPerfilUsuario")
                        .HasColumnType("bigint");

                    b.Property<long>("idStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("nomeUsuario")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nomeUsuario");

                    b.Property<bool>("precisaTrocarSenha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("precisaTrocarSenha");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("senha");

                    b.HasKey("id");

                    b.HasIndex("idFuncionario");

                    b.HasIndex("idPerfilUsuario");

                    b.HasIndex("idStatus");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.VersaoCid", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("VersaoCid", (string)null);
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Cid", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.Status", "status")
                        .WithMany("cid")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.VersaoCid", "versaocid")
                        .WithMany("cid")
                        .HasForeignKey("idVersaoCid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("status");

                    b.Navigation("versaocid");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Contato", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.EstabelecimentoSaude", "estabelecimentosaude")
                        .WithMany("contato")
                        .HasForeignKey("idEstabelecimentoSaude")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_estabelecimentosaude_contato");

                    b.HasOne("SGFME.Domain.Entidades.Funcionario", "funcionario")
                        .WithMany("contato")
                        .HasForeignKey("idFuncionario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_funcionario_contato");

                    b.HasOne("SGFME.Domain.Entidades.Medico", "medico")
                        .WithMany("contato")
                        .HasForeignKey("idMedico")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_medico_contato");

                    b.HasOne("SGFME.Domain.Entidades.Paciente", "paciente")
                        .WithMany("contato")
                        .HasForeignKey("idPaciente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_paciente_contato");

                    b.HasOne("SGFME.Domain.Entidades.Representante", "representante")
                        .WithMany("contato")
                        .HasForeignKey("idRepresentante")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_representante_contato");

                    b.HasOne("SGFME.Domain.Entidades.TipoContato", "tipocontato")
                        .WithMany("contato")
                        .HasForeignKey("idTipoContato")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_tipocontato_contato");

                    b.Navigation("estabelecimentosaude");

                    b.Navigation("funcionario");

                    b.Navigation("medico");

                    b.Navigation("paciente");

                    b.Navigation("representante");

                    b.Navigation("tipocontato");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Endereco", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.EstabelecimentoSaude", "estabelecimentosaude")
                        .WithMany("endereco")
                        .HasForeignKey("idEstabelecimentoSaude")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_estabelecimentosaude_endereco");

                    b.HasOne("SGFME.Domain.Entidades.Funcionario", "funcionario")
                        .WithMany("endereco")
                        .HasForeignKey("idFuncionario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_funcionario_endereco");

                    b.HasOne("SGFME.Domain.Entidades.Medico", "medico")
                        .WithMany("endereco")
                        .HasForeignKey("idMedico")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_medico_endereco");

                    b.HasOne("SGFME.Domain.Entidades.Paciente", "paciente")
                        .WithMany("endereco")
                        .HasForeignKey("idPaciente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_paciente_endereco");

                    b.HasOne("SGFME.Domain.Entidades.Representante", "representante")
                        .WithMany("endereco")
                        .HasForeignKey("idRepresentante")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_representante_endereco");

                    b.HasOne("SGFME.Domain.Entidades.TipoEndereco", "tipoendereco")
                        .WithMany("endereco")
                        .HasForeignKey("idTipoEndereco")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_tipoendereco_endereco");

                    b.Navigation("estabelecimentosaude");

                    b.Navigation("funcionario");

                    b.Navigation("medico");

                    b.Navigation("paciente");

                    b.Navigation("representante");

                    b.Navigation("tipoendereco");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.EstabelecimentoSaude", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.Status", "status")
                        .WithMany("estabelecimentosaude")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("status");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Funcionario", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.CorRaca", "corraca")
                        .WithMany("funcionario")
                        .HasForeignKey("idCorRaca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.EstabelecimentoSaude", "estabelecimentosaude")
                        .WithMany("funcionario")
                        .HasForeignKey("idEstabelecimentoSaude")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.EstadoCivil", "estadocivil")
                        .WithMany("funcionario")
                        .HasForeignKey("idEstadoCivil")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Sexo", "sexo")
                        .WithMany("funcionario")
                        .HasForeignKey("idSexo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Status", "status")
                        .WithMany("funcionario")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("corraca");

                    b.Navigation("estabelecimentosaude");

                    b.Navigation("estadocivil");

                    b.Navigation("sexo");

                    b.Navigation("status");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Medicamento", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.Status", "status")
                        .WithMany("medicamento")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("status");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Medico", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.CorRaca", "corraca")
                        .WithMany("medico")
                        .HasForeignKey("idCorRaca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.EstadoCivil", "estadocivil")
                        .WithMany("medico")
                        .HasForeignKey("idEstadoCivil")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Sexo", "sexo")
                        .WithMany("medico")
                        .HasForeignKey("idSexo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Status", "status")
                        .WithMany("medico")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("corraca");

                    b.Navigation("estadocivil");

                    b.Navigation("sexo");

                    b.Navigation("status");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Paciente", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.CorRaca", "corraca")
                        .WithMany("paciente")
                        .HasForeignKey("idCorRaca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.EstadoCivil", "estadocivil")
                        .WithMany("paciente")
                        .HasForeignKey("idEstadoCivil")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Profissao", "profissao")
                        .WithMany("paciente")
                        .HasForeignKey("idProfissao")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Sexo", "sexo")
                        .WithMany("paciente")
                        .HasForeignKey("idSexo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Status", "status")
                        .WithMany("paciente")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("corraca");

                    b.Navigation("estadocivil");

                    b.Navigation("profissao");

                    b.Navigation("sexo");

                    b.Navigation("status");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Representante", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.CorRaca", "corraca")
                        .WithMany("representante")
                        .HasForeignKey("idCorRaca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.EstadoCivil", "estadocivil")
                        .WithMany("representante")
                        .HasForeignKey("idEstadoCivil")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Profissao", "profissao")
                        .WithMany("representante")
                        .HasForeignKey("idProfissao")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Sexo", "sexo")
                        .WithMany("representante")
                        .HasForeignKey("idSexo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Status", "status")
                        .WithMany("representante")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("corraca");

                    b.Navigation("estadocivil");

                    b.Navigation("profissao");

                    b.Navigation("sexo");

                    b.Navigation("status");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Usuario", b =>
                {
                    b.HasOne("SGFME.Domain.Entidades.Funcionario", "funcionario")
                        .WithMany("usuario")
                        .HasForeignKey("idFuncionario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.PerfilUsuario", "perfilusuario")
                        .WithMany("usuario")
                        .HasForeignKey("idPerfilUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGFME.Domain.Entidades.Status", "status")
                        .WithMany("usuario")
                        .HasForeignKey("idStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("funcionario");

                    b.Navigation("perfilusuario");

                    b.Navigation("status");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.CorRaca", b =>
                {
                    b.Navigation("funcionario");

                    b.Navigation("medico");

                    b.Navigation("paciente");

                    b.Navigation("representante");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.EstabelecimentoSaude", b =>
                {
                    b.Navigation("contato");

                    b.Navigation("endereco");

                    b.Navigation("funcionario");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.EstadoCivil", b =>
                {
                    b.Navigation("funcionario");

                    b.Navigation("medico");

                    b.Navigation("paciente");

                    b.Navigation("representante");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Funcionario", b =>
                {
                    b.Navigation("contato");

                    b.Navigation("endereco");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Medico", b =>
                {
                    b.Navigation("contato");

                    b.Navigation("endereco");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Paciente", b =>
                {
                    b.Navigation("contato");

                    b.Navigation("endereco");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.PerfilUsuario", b =>
                {
                    b.Navigation("usuario");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Profissao", b =>
                {
                    b.Navigation("paciente");

                    b.Navigation("representante");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Representante", b =>
                {
                    b.Navigation("contato");

                    b.Navigation("endereco");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Sexo", b =>
                {
                    b.Navigation("funcionario");

                    b.Navigation("medico");

                    b.Navigation("paciente");

                    b.Navigation("representante");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.Status", b =>
                {
                    b.Navigation("cid");

                    b.Navigation("estabelecimentosaude");

                    b.Navigation("funcionario");

                    b.Navigation("medicamento");

                    b.Navigation("medico");

                    b.Navigation("paciente");

                    b.Navigation("representante");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.TipoContato", b =>
                {
                    b.Navigation("contato");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.TipoEndereco", b =>
                {
                    b.Navigation("endereco");
                });

            modelBuilder.Entity("SGFME.Domain.Entidades.VersaoCid", b =>
                {
                    b.Navigation("cid");
                });
#pragma warning restore 612, 618
        }
    }
}
